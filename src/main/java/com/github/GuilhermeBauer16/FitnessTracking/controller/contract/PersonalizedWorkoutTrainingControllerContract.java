package com.github.GuilhermeBauer16.FitnessTracking.controller.contract;

import com.github.GuilhermeBauer16.FitnessTracking.model.values.PersonalizedWorkoutTrainingVO;
import com.github.GuilhermeBauer16.FitnessTracking.model.WorkoutExerciseEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

public interface PersonalizedWorkoutTrainingControllerContract {

    /**
     * This endpoint belongs to the "PersonalizedWorkoutTraining" application.
     * Responsible for registering new Personalized Workout Trainings in the system.
     *
     * <p>Accepts a POST request with the {@link PersonalizedWorkoutTrainingVO} object in the body that contains the information
     * of the Personalized Workout Training to be registered.
     *
     * <p>After the successful creation of the Personalized Workout Training, it returns a {@link ResponseEntity} object that encapsulates the details of
     * the Personalized Workout Training creation in the form of {@link PersonalizedWorkoutTrainingVO}.
     *
     * <p>This includes the unique Personalized Workout Training ID generated by the system,
     * the repetitions, series, weight, and the workout exercise associated with this Personalized Workout Training.
     *
     * <p>This includes a {@link WorkoutExerciseEntity} from another table.
     * For more details, see the {@link WorkoutExerciseEntity}.
     * The relationship between these tables is @ManyToOne.
     *
     * <p>In any case of violation of the integrity validation of the entity model, an appropriate HTTP error is returned along with the error details.
     *
     * @param target {@link PersonalizedWorkoutTrainingVO} object encapsulating the details of the
     *               new Personalized Workout Training to be registered.
     *               This parameter must be present in the POST request body and is deserialized into the {@link PersonalizedWorkoutTrainingVO} type.
     * @return {@link ResponseEntity} that encapsulates the {@link PersonalizedWorkoutTrainingVO} if the Personalized Workout Training is created successfully.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */


    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)

    @Operation(summary = "Register a new Personalized workout training", description = "That method will use a POST to " +
            "Returns a created Personalized workout training")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class))),
            @ApiResponse(responseCode = "404", description = "Will throw a custom exception: Personalized Workout Training Not Found" +
                    " or Field Not Found Exception, depending of the situation"),
            @ApiResponse(responseCode = "500", description = "Internal server error")

    })
    ResponseEntity<PersonalizedWorkoutTrainingVO> create(@RequestBody PersonalizedWorkoutTrainingVO target);

    /**
     * Updates an existing Personalized Workout Training.
     *
     * <p>Accepts a PUT request with the {@link PersonalizedWorkoutTrainingVO} object in the body that contains the updated information
     * of the Personalized Workout Training.
     *
     * <p>Returns a {@link ResponseEntity} object encapsulating the updated {@link PersonalizedWorkoutTrainingVO} if the update is successful.
     *
     * @param target a {@link PersonalizedWorkoutTrainingVO} object encapsulating the details of the Personalized Workout Training to be updated.
     *               This parameter must be present in the PUT request body and is deserialized into the {@link PersonalizedWorkoutTrainingVO} type.
     * @return {@link ResponseEntity} that encapsulates the {@link PersonalizedWorkoutTrainingVO} if the update is successful.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */

    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Update a Personalized workout training", description = "Returns an updated Workout exercise")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class))),
            @ApiResponse(responseCode = "404", description = "Will throw a custom exception: Personalized Workout Training Not Found" +
                    " or Field Not Found Exception, depending on the situation"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    ResponseEntity<PersonalizedWorkoutTrainingVO> update(@RequestBody PersonalizedWorkoutTrainingVO target);

    /**
     * Retrieves a single Personalized Workout Training by its ID.
     *
     * <p>Accepts a GET request with the ID of the Personalized Workout Training as a path variable.
     * <p>The ID type is a {@link String }</p>
     * <p>Returns a {@link ResponseEntity} object encapsulating the {@link PersonalizedWorkoutTrainingVO} if the retrieval is successful.
     *
     * @param id the ID of the Personalized Workout Training to be retrieved.
     * @return {@link ResponseEntity} that encapsulates the {@link PersonalizedWorkoutTrainingVO} if the retrieval is successful.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */

    @GetMapping(value = "/{id}")
    @Operation(summary = "Get a single Personalized workout training", description = "Returns a Workout exercise")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class))),
            @ApiResponse(responseCode = "404", description = "Will throw a custom exception: Personalized Workout Training Not Found" +
                    " or Field Not Found Exception, depending on the situation"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    ResponseEntity<PersonalizedWorkoutTrainingVO> findById(@PathVariable(value = "id") String id);

    /**
     * Retrieves a list of all Personalized Workout Trainings.
     *
     * <p>Accepts a GET request and returns a paginated list of {@link PersonalizedWorkoutTrainingVO}.
     *
     * @param pageable the pagination information, allowing the list to be sorted and organized into pages.
     * @return {@link ResponseEntity} that encapsulates a paginated list of {@link PersonalizedWorkoutTrainingVO}.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */

    @GetMapping
    @Operation(summary = "Get a Personalized workout training list", description = "Returns a list of Workout exercises")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class)))
    })
    ResponseEntity<Page<PersonalizedWorkoutTrainingVO>> findAll(final Pageable pageable);

    /**
     * Retrieves a list of Personalized Workout Trainings filtered by muscle group.
     *
     * <p>Accepts a GET request with the {@link PersonalizedWorkoutTrainingVO} object in the body that contains the muscle group to filter by.
     *
     * @param t {@link PersonalizedWorkoutTrainingVO} object encapsulating the muscle group to filter by.
     *          This parameter must be present in the GET request body and is deserialized into the {@link PersonalizedWorkoutTrainingVO} type.
     * @return {@link ResponseEntity} that encapsulates a list of {@link PersonalizedWorkoutTrainingVO} filtered by muscle group.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */
    @GetMapping("/findByMuscleGroup")
    @Operation(summary = "Get a Personalized workout training list filtered by muscle group", description = "Returns a list of Personalized workout trainings with the specific muscle group that the user chose to filter by")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class)))
    })
    ResponseEntity<List<PersonalizedWorkoutTrainingVO>> findPersonalizedWorkoutTrainingByMuscleGroup(@RequestBody PersonalizedWorkoutTrainingVO t);

    /**
     * Retrieves a list of Personalized Workout Trainings filtered by difficulty level.
     *
     * <p>Accepts a GET request with the {@link PersonalizedWorkoutTrainingVO} object in the body that contains the difficulty level to filter by.
     *
     * @param t a {@link PersonalizedWorkoutTrainingVO} object encapsulating the difficulty level to filter by.
     *          This parameter must be present in the GET request body and is deserialized into the {@link PersonalizedWorkoutTrainingVO} type.
     * @return {@link ResponseEntity} that encapsulates a list of {@link PersonalizedWorkoutTrainingVO} filtered by difficulty level.
     */
    @GetMapping("/findByDifficultLevel")
    @Operation(summary = "Get a Personalized workout training list filtered by difficulty level", description = "Returns a list of Personalized workout trainings with the specific difficulty level that the user chose to filter by")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class)))
    })
    ResponseEntity<List<PersonalizedWorkoutTrainingVO>> findPersonalizedWorkoutTrainingByDifficultLevel(@RequestBody PersonalizedWorkoutTrainingVO t);

    /**
     * Retrieves a list of Personalized Workout Trainings filtered by name.
     *
     * <p>Accepts a GET request with the {@link PersonalizedWorkoutTrainingVO} object in the body that contains the name to filter by.
     *
     * @param t a {@link PersonalizedWorkoutTrainingVO} object encapsulating the name to filter by.
     *          This parameter must be present in the GET request body and is deserialized into the {@link PersonalizedWorkoutTrainingVO} type.
     * @return {@link ResponseEntity} that encapsulates a list of {@link PersonalizedWorkoutTrainingVO} filtered by name.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */
    @GetMapping("/findByName")
    @Operation(summary = "Get a Personalized workout training list filtered by name", description = "Returns a list of Personalized workout trainings with the specific name that the user chose to filter by")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class)))
    })
    ResponseEntity<List<PersonalizedWorkoutTrainingVO>> findPersonalizedWorkoutTrainingByName(@RequestBody PersonalizedWorkoutTrainingVO t);

    /**
     * Deletes an existing Personalized Workout Training by its ID.
     * <p> The ID type is a {@link String}
     * <p>Accepts a DELETE request with the ID of the Personalized Workout Training as a path variable.
     *
     * <p>Returns a {@link ResponseEntity} with no content if the deletion is successful.
     *
     * @param id the ID of the Personalized Workout Training to be deleted.
     * @return {@link ResponseEntity} with no content if the deletion is successful.
     * @see WorkoutExerciseEntity
     * @see PersonalizedWorkoutTrainingVO
     */
    @DeleteMapping(value = "/{id}")
    @Operation(summary = "Delete a Personalized workout training")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Successful operation, the Personalized workout training was deleted",
                    content = @Content(schema = @Schema(implementation = PersonalizedWorkoutTrainingVO.class))),
            @ApiResponse(responseCode = "404", description = "Will throw a custom exception: Personalized Workout Training Not Found" +
                    " or Field Not Found Exception, depending on the situation"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    ResponseEntity<Void> delete(@PathVariable(value = "id") String id);
}